#!/usr/bin/env python3
import tkinter as tk
import numpy as np
import math
from tkinter import ttk
from tkinter.font import Font
from collections import OrderedDict
from screeninfo import get_monitors

limbo = (-10000,-10000)
def ifexists(val, defau):
    if val:
        return val
    else:
        return defau

class Point:
    x = 0
    y = 0
    def __init__(self,x,y):
        self.x,self.y =x,y
    def __add__(self,other):
        return Point(self.x+other.x,self.y+other.y)
    def __sub__(self,other):
        return Point(self.x-other.x,self.y-other.y)
    def list(self):
        return [self.x,self.y]
    def __str__(self,other):
        return str((self.x,self.y))
#================================================================================


root = tk.Tk()
root.title("Whiteboard")

#================================================================================
get = lambda grp: palette.palette[grp].get()
#================================================================================
class PaletteItem:
    items = []
    buttons = None
    exclude = []
    parent = None
    default = None
    current = None
    default = None
    last = None
    container = None
    icon = None
    icontext = ""
    openQ = True
    def __init__(self,parent,root=None):
        self.buttons = {}
        self.parent = parent
        self.container = tk.Frame(parent)
        self.container.pack(side=tk.LEFT, padx=3)
        self.icon = tk.Label(self.container,
                                 text=self.icontext,
                                 bg="grey",
                                 fg="white",
                                 font=("Times-Bold",14)
                                 ) #Need to flavor this for each palette
        self.icon.pack(side=tk.LEFT)
        self.icon.bind("<1>",lambda e:self.toggle())
        for name in self.items:
            self.buttons[name] = tk.Frame(self.container, borderwidth=4, background="grey", width=30, height=30, relief="raised")
#            self.buttons[name].pack(side=tk.LEFT)
            self.buttons[name].bind("<1>", lambda e,name=name: self.select(name))
        self.current = self.default
        self.modify_buttons(root)
        self.select(self.default)
        self.reveal()
    def toggle(self):
        self.openQ = not self.openQ
        if self.openQ: self.reveal()
        else: self.hide()
    def reveal(self):
        #IDEA: hide all others before I do this one
#        self.icon.pack_forget()
        for name in self.items:
            self.buttons[name].pack(side=tk.LEFT)
        self.container.update()
    def hide(self):
        for name in self.items:
            self.buttons[name].pack_forget()
#        self.icon.pack(side=tk.LEFT)
    def get(self,name=None):
        if not name:
            name = self.current
        return name
    def highlight(self,widget,onQ): #highlight the button in some way, like turn it white instead of black
        pass
    def icon_select(self,item):
        #special effect for the icon itself
        pass
    def select(self,item):
        for name,widget in self.buttons.items():
            if name==item:
                widget.config(relief="sunken")
            else:
                widget.config(relief="raised")
            self.highlight(widget, name==item)
        self.icon_select(item)
        if item not in self.exclude:
            self.last = self.current
        self.current = item
#================================================================================
class Color(PaletteItem):
    items = ["black", "red", "blue", "green", "yellow", "white"]
    colors = OrderedDict([
        ("black", "black"),
        ("red", "#D81B1B"),
        ("blue", "#1E88E5"),
        ("green", "#028A92"),
        ("yellow", "#FFC107"), 
        ("white", "white"),
    ])
    default = "black"
    exclude = ["white"]
    icontext = "C"
    def modify_buttons(self,root):
        key = 1
        for name in self.items:
            self.buttons[name].configure(background=self.get(name))
            root.bind(f"<Key-{key}>", lambda e, name=name: self.select(name))
        
    def get(self,name=None):
        if not name:
            name = self.current
        return self.colors[name]

    def icon_select(self,item):
        if item=="black":
            self.icon.configure(bg="black", fg="white")
        else:
            self.icon.configure(bg=self.colors[item], fg="black")
#================================================================================
class Width(PaletteItem):
    items = [1,2,4,6,8]
#    fontbase = 8 #font size is fontbase + width
    default = 2
    icontext = "W"
    def modify_buttons(self,root):
        for name in self.items:
            self.buttons[name].configure(borderwidth=name, width=20, height=26, padx=2)
#            lbl = tk.Label(self.buttons[name], text="A", font=("Times",self.fontbase+name), foreground="white")
#            lbl.pack()
            
    def highlight(self,widget,onQ):
        widget.configure(background=["grey","white"][onQ], relief="solid")
        
    def get(self):
        if get("color") == "white":
            return self.current*4
        else:
            return self.current
    def icon_select(self,item):
        self.icon.configure(text=f"W{item}")
#        self.icon.configure(highlightborder=item,highlightcolor="black")
#================================================================================
class Type(PaletteItem):
    parent = None #the palette
    items = ["curve", "line", "rectangle", "oval", "text", "select"]
    icons =  {"curve": "🖋", "line": "⟋", "rectangle": "▢", "oval":"◯","text":"A","select": "✢"}
    default = "curve"
    exclude = ["text"]
    template = {}
    icontext = "T"
    def modify_buttons(self, root):
        
        for name in self.items:
            widget = self.buttons[name]
            txt = tk.Label(widget, text = self.icons[name])
            bindtags = list(txt.bindtags())
            bindtags.insert(1, widget)
            txt.bindtags(tuple(bindtags))
            txt.pack()
    def get(self,name=None):
        if not name:
            name = self.current
        templates = {"curve": Curve, "line": Line, "rectangle": Rectangle, "oval": Oval, "text": Text, "select": Select}
        return templates[name]
    def icon_select(self,item):
        self.icon.configure(text=self.icons[item],width=2)
#================================================================================
class Palette:
    widget = None
    palette = {
        "color": Color,
        "width": Width,
        "type": Type,
        }
    navs = []
    def __init__(self,parent,root,pages):
        self.widget = tk.Frame(parent)
        self.left = tk.Frame(self.widget)
        self.right = tk.Frame(self.widget)
        self.left.pack(side=tk.LEFT)
        self.right.pack(side=tk.RIGHT)
        for key,val in self.palette.items():
            self.palette[key] = val(self.widget, root)
        self.navs = pages.make_buttons(self.left, self.left)
        self.navs["back"].pack(side = tk.LEFT)
        self.navs["new"].pack(side = tk.LEFT)
        self.navs["forward"].pack(side = tk.RIGHT)
        monitors = get_monitors()
        self.toggler("▢▣",self.toggleMirror,len(get_monitors())>1)
        self.toggler(" 2 ",self.toggleSecondPage,True)
    def toggleMirror(self, onQ):
        if onQ:
            pages.show_mirror(True)
        else:
            pages.mirror.withdraw()
    def toggleSecondPage(self, onQ):
        pages.show2ndpage = onQ
        pages.show(pages.curpage)
    def toggler(self, label, command, initvalue):
        button = tk.Label(self.widget, text=label, borderwidth=4, relief="raised")
        button.status = not initvalue
        button.pack(side=tk.LEFT)
        button.bind("<1>", lambda e,btn=button, cmd=command: self.toggleclick(btn,cmd))
        self.toggleclick(button,command)
    def toggleclick(self, button, command):
        button.status = not button.status
        relief = "raised"
        if button.status: relief = "sunken"
        button.config(relief=relief)
        command(button.status)
        

#================================================================================
#SECTION: Elements
#--------------------------------------------------------------------------------
#================================================================================
class Element: #generic class
    canvas = None #the canvas this element lives on
    mirror = None
    scale = None
    obj = None #the ID (number) of the object
    mobj = None #the ID (number) of the object on the mirror
    def init(self, page):
        self.canvas = page.canvas
        self.mirror = page.mirror
        self.scale = page.scale
    def __init__(self, page):
        self.init(page)
    def scale_mirror(self):
        self.mirror.scale(self.mobj, 0,0, self.scale,self.scale)
    def add(self, x, y, shift=False): pass
    def done(self): pass
    def hide(self): pass #hide the graphic
    def update(self): pass
    def __del__(self):
        if self.obj:
            self.canvas.delete(self.obj)
            self.mirror.delete(self.mobj)
#================================================================================
class Change(Element): #instructs an element to change certain things
    delete = False #if true, the object has been deleted
    color = None #or a 2-ple with the original and the new color
    width = None #or a 2-ple with the original and the new width
    text = None #or a 2-ple with the original and new text (and font eventually?)
    move = None #or a 2-ple of two points, original ul and new ul
    def __init__(self,page,obj,mobj):
        self.init(page)
        self.obj = obj
        self.mobj = mobj
    def hide(self):
        #change the elements on object to the old settings
        pass
    def update(self):
        #change the elements on object to the new settings
        pass
#================================================================================    
class Curve(Element):
    points = []
    color = None
    width = None
    cursor = None
    ul = None #location of the first point
    def __init__(self, page, x, y, color=None, width=None):
        self.init(page)
        self.color = ifexists(color, get("color"))
        self.width = ifexists(width, get("width"))
        self.obj = self.canvas.create_line((x,y),(x,y), fill=self.color, width=self.width)
        self.mobj = self.mirror.create_line((x,y),(x,y), fill=self.color, width=self.width)
        self.scale_mirror()
        self.mirror.scale(self.mobj,0,0,self.scale,self.scale)
        self.cursor = self.canvas.create_oval(*self.center(x,y,self.width), fill="", outline="black") #*2
        self.canvas.lift(self.cursor)
        self.points = [(x,y)]
        self.ul = Point(x,y)
    def center(self,x,y,w):
        return [x-w/2,y-w/2,x+w/2,y+w/2]
    def update(self):
        pts = [i for sub in self.points for i in sub]
        self.canvas.coords(self.obj, *pts)
        self.mirror.coords(self.mobj, *pts)
        self.scale_mirror()
    def hide(self):
        self.canvas.moveto(self.obj,*limbo)
        self.mirror.moveto(self.mobj,*limbo)
#        self.canvas.moveto(self.obj, *(self.points[0]))
#        self.canvas.coords(self.obj, 0,0,0,0)
    def add(self, x, y, shift=False):
        self.points += [(x,y)]
        self.update()
        if self.cursor:
            self.canvas.coords(self.cursor,*self.center(x,y,self.width))
            self.canvas.lift(self.cursor)
    def straighten(self):
        tolerance = 0.01 #how far apart should the ends be?
        a = list(self.points[0])
        b = list(self.points[-1])
        
        for i in [0,1]:
            if abs(a[i]-b[i])/abs(a[1-i]+b[1-i]) < tolerance:
                avg = (a[i]+b[i])/2
                a[i] = avg
                b[i] = avg
        self.points = [tuple(a), tuple(b)]
        self.ul = Point(*a)
        self.update()
    def done(self):
        if self.cursor:
            self.canvas.delete(self.cursor)
            self.cursor = None
        return 
                           
#================================================================================
def sign(x):
    if x>0: return 1
    if x<0: return -1
    return 0
class Shape(Element):
    ul = None #x,y of upper-left corner
    lr = None #x,y of lower-right corner
    color = None
    width = None
    def init(self, page, x, y, color=None, width=None, fill=None):
        self.canvas = page.canvas
        self.mirror = page.mirror
        self.scale = page.scale
        self.color = ifexists(color, get("color"))
        self.width = ifexists(width, get("width"))
        self.ul = Point(x,y)
        self.lr = Point(x,y)
    def __init__(self,canvas,x,y,**args):
        self.init(self,canvas,x,y,**args)
    def update(self):
        self.canvas.coords(self.obj, *(self.ul.list()+self.lr.list()))
        self.mirror.coords(self.mobj, *(self.ul.list()+self.lr.list()))
        self.scale_mirror()
    def hide(self):
#        self.canvas.coords(self.obj, 0,0,0,0)
        self.canvas.moveto(self.obj,*limbo)
        self.mirror.moveto(self.mobj,*limbo)
    def lock(self,x,y):
        result = Point(x,y)
        d = result - self.ul
        if abs(d.x)<abs(d.y):
            result.x = self.ul.x + sign(d.x)*abs(d.y)
        else:
            result.y = self.ul.y + sign(d.y)*abs(d.x)
        return result
    def add(self,x,y, shift=False):
        p = Point(x,y)
        if shift:
            p = self.lock(x,y)
        self.lr = p
        self.update()
    def done(self):
        pass
#FIX: allow for constrained motion!
class Rectangle(Shape):
    def __init__(self,canvas,x,y,**args):
        self.init(canvas,x,y,**args)
        self.obj = self.canvas.create_rectangle(x,y,x,y,outline = self.color, width=self.width)
        self.mobj = self.mirror.create_rectangle(x,y,x,y,outline = self.color, width=self.width)
        self.scale_mirror()
class Line(Shape):
    def __init__(self,canvas,x,y,**args):
        self.init(canvas,x,y,**args)
        self.obj = self.canvas.create_line(x,y,x,y,fill = self.color, width=self.width)
        self.mobj = self.mirror.create_line(x,y,x,y,fill = self.color, width=self.width)
        self.scale_mirror()
    def lock(self,x,y):
        tolerance = 2  /180
        P = Point(x,y)
        d = P - self.ul
        theta = math.atan2(d.y,d.x)/math.pi #ranges from -1 to 1
        if abs(theta-0) < tolerance or abs(theta-1)<tolerance or abs(theta+1)<tolerance:
            d.y = 0
        elif abs(theta-0.5)<tolerance or abs(theta+0.5)<tolerance:
            d.x = 0
        P = self.ul + d
        return P
        
class Oval(Shape):
    def __init__(self,canvas,x,y,**args):
        self.init(canvas,x,y,**args)
        self.obj = self.canvas.create_oval(x,y,x,y,outline = self.color, width=self.width)
        self.mobj = self.mirror.create_oval(x,y,x,y,outline = self.color, width=self.width)
        self.scale_mirror()
#================================================================================
class Text(Shape):
    font = None
    mfont = None
    family="monofur"
    size=18
    txtwidget = None
    text = ""
    locked = False
    color = "black"
    def __init__(self,page,x,y,**args):
        self.init(page,x,y,**args)
        self.obj = self.canvas.create_rectangle(x,y,x,y,outline = self.color, width=1)
        self.font = Font(family=self.family, size=self.size)
        self.mfont = Font(family=self.family, size=int(self.size*self.scale))
    def lock(self):
        self.locked = True
        self.canvas.update()
        text = self.txtwidget.get('1.0','end')
        self.canvas.delete(self.obj)
        self.txtwidget.destroy()
        self.mfont.size = int(self.size*self.scale)
        self.obj = self.canvas.create_text(*self.ul.list(), text=text,
                                               anchor=tk.NW,font=self.font, fill=self.color)
        self.mobj = self.mirror.create_text(*self.ul.list(), text=text,
                                                anchor=tk.NW,font=self.mfont, fill=self.color)
        self.scale_mirror()
        
        #FIX: change font size?
        palette.palette["type"].select(palette.palette["type"].last)
    
    def hide(self):
        self.canvas.moveto(self.obj,*limbo)
        self.mirror.moveto(self.mobj,*limbo)
    def update(self):
        if not self.locked and not self.txtwidget:
            self.canvas.coords(self.obj, *(self.ul.list()+self.lr.list()))
        else:
            self.canvas.moveto(self.obj,self.ul.x,self.ul.y)
            self.mirror.moveto(self.mobj,self.ul.x,self.ul.y)
            self.scale_mirror()
            self.mfont.size = int(self.size*self.scale)
            #FIX: change font size?
    def done(self):
        width,height = (self.lr - self.ul).list()
        self.txtwidget = tk.Text(self.canvas,width=width//self.size, height=height//self.size,borderwidth=1,wrap=tk.WORD,font=self.font,fg=self.color)
        self.txtwidget.bind("<Escape>",lambda e:self.lock())
        self.canvas.delete(self.obj)
        self.obj = self.canvas.create_window(self.ul.x-5,self.ul.y-5,anchor=tk.NW, window=self.txtwidget, width=width, height=height)
        self.canvas.focus(self.obj)
        self.txtwidget.bind("<FocusOut>", lambda e:self.lock())
        self.txtwidget.focus()
#================================================================================
class Select(Element):
    def __init__(self,parent,root=None):
        pass
    

#================================================================================
#SECTION: Main
#--------------------------------------------------------------------------------
#================================================================================
class Page:
    parent = None #the parent widget
    canvas = None #widget containing the canvas
    elements = [] #list of elements. Question: do these match up with canvas numbers?
    undone = [] #list of elements that have been undone
    page = None
    chosen = None
    mchosen = None
    mRoot = None #window where the mirror resides
    mirror = None #the mirrored canvas
    scale = 1 #the scale of the mirror
    def __init__(self, parent, pages, page, mirror):
        self.parent = parent
        self.page = page
        self.scale = pages.scale
        self.mRoot = mirror
        self.canvas = tk.Canvas(parent,
                                    width=pages.cX,
                                    height = pages.cY,
                                    background="white",highlightbackground="black")
        self.canvas.create_text(0,
                                0,
                                anchor=tk.NW,
                                text=" "+str(page+1),fill="grey", font=('Arial',18))
        self.mirror = tk.Canvas(self.mRoot,
                                    width=(pages.cX-10)*self.scale,
                                    height=(pages.cY-10)*self.scale,
                                    background="white", highlightbackground="black")
        mpage = self.mirror.create_text(0,
                                0,
                                anchor=tk.NW, text=" "+str(page+1),fill="grey", font=('Arial',18))
#        self.mirror.scale(mpage, 0,0, self.scale,self.scale)
        self.canvas.bind("<1>", self.startMouse)
        self.canvas.bind("<B1-Motion>", self.dragMouse)
        self.canvas.bind("<Shift-B1-Motion>",lambda e,shift=True: self.dragMouse(e,shift))
        self.canvas.bind("<Shift-1>", self.dragMouse)
        self.canvas.bind("<ButtonRelease-1>", self.doneMouse)
    def selectQ(self): #true if in select mode
        return (palette.palette["type"].current == "select")
    def poke(self):
        self.canvas.update()
        self.mirror.update()
    def selected(self):
        if self.chosen:
            return self.chosen
        if not self.elements: return None
        return self.elements[-1]
    def show(self,col=0):
        self.canvas.grid(row=1,column=col)
        self.mirror.grid(row=0,column=col)
    def forget(self):
        self.canvas.grid_forget()
    def startMouse(self, e):
        if self.selectQ():
            d = 5
            obj = self.canvas.find_overlapping(e.x-d,e.y-d,e.x+d,e.y+d)
            if obj:
                self.chosen = Change(obj)
                self.mchosen = Change(obj)
                self.elements += [self.chosen]
            pass
        else:
            self.chosen = None
            self.parent.focus()
            pages.select(self.page)
            self.elements += [get("type")(self, e.x, e.y)]
    def dragMouse(self, e, shift=False):
        if self.selectQ():
            if self.chosen:
                pass
        else:
            self.chosen = None
            if not self.elements: return
            last = self.elements[-1]
            if not last: return
            last.add(e.x,e.y,shift)
#        if isinstance(last,Curve): #ALT: all these objects have .add and .done so I don't need to check
#            last.add(e.x,e.y)
    def doneMouse(self, e):
        if self.selectQ():
            pass
        else:
            self.chosen=None
            if not (last:= self.selected()): return
            if last: last.done()
    def straighten(self, e):
        """might work for other shapes too"""
        if isinstance(self.elements[-1], Curve):
            self.elements[-1].straighten()
    def clear(self, e):
        while self.elements:
            item = self.elements.pop()
            del item
    def undo(self,e):
        if self.elements:
            self.elements[-1].hide()
            self.undone += [self.elements.pop(-1)]
    def redo(self,e):
        if self.undone:
            self.elements += [self.undone.pop(-1)]
            self.elements[-1].update()
    def clearUndo(self,e=None):
        #call this whenever something like startMouse is done?
        #or maybe when the page is changed or something, just for fun?
        while self.undone:
            x = self.undone.pop(-1)
            del x
#================================================================================
class Pages:
    aR = 11/8.5
    cX = 700 #width of each page
    cY = 906 #cX*aR
    curpage = 0
    show2ndpage = True
    selected = 0 #page that is selected, might be different from curpage
    #FIX: I need to implement this selected business!
    pages = []
    parent = None
    nums = [] #list of numbers
    Ncols = 2
    scale = 1
    mirror = None #widget for the mirror topwindow
    def __init__(self,parent): #parent is what we call "main"
        self.parent = parent
        self.parent.rowconfigure(0)
        self.parent.columnconfigure(1)
        self.mirror = tk.Toplevel(root)
        self.mirror.title("*MIRROR*")
        self.show_mirror(False)
        for pg in range(0,self.Ncols):
            self.nums += [tk.Label(parent, text="", background="grey")]
            self.nums[-1].bind("<1>", lambda e,d=pg:self.select(self.curpage+d))
            self.nums[pg].grid(row=0, column=pg, sticky=tk.EW)
            self.new()
        self.show(0)
        self.select(0)

    def show_mirror(self,force=False):
        monitors = get_monitors()
        if len(monitors)>1 or force:
            M = monitors[-1]
            self.mirror.deiconify()
            nscaleW = M.width/(2*self.cX)
            nscaleH = M.height/self.cY
            self.scale = min(nscaleW,nscaleH)
            geometry = f"{int(self.scale*2*self.cX)}x{int(self.scale*2*self.cY)}+{M.x}+{M.y}"
            self.mirror.geometry(geometry)
            self.mirror.lower(self.parent)
        else:
            self.mirror.withdraw()
        

    def make_buttons(self, left,right):
        LB = tk.Button(left, text="←", command=lambda: self.shift(-1))
        RB = tk.Button(right, text="→", command=lambda: self.shift(1))
        NB = tk.Button(left, text="+", command=lambda: self.new(True))
        return {"back":LB, "forward":RB, "new": NB}
    def new(self,showQ=False):
        self.pages += [Page(main,self,len(self.pages), self.mirror)]
        if showQ:
            self.show(len(self.pages)-1)
    def select(self, num):
        self.selected = num
        if num < self.curpage or num>self.curpage+self.Ncols-1:
            self.show(num)
        col = num - self.curpage
        for i in range(0,self.Ncols):
            if i == col:
                self.nums[i].config(background="yellow")
            else:
                self.nums[i].config(background="grey")

    def show(self,num):
        num = max(num,0)
        num = min(num,len(self.pages)-self.Ncols)
        for pg in range(0,self.Ncols):
            self.pages[self.curpage+pg].forget()
        self.curpage = num
        for pg in range(0,self.Ncols):
            self.nums[pg].config(text=str(self.curpage+pg+1))
            self.pages[self.curpage+pg].show(pg)
            self.pages[self.curpage+pg].poke()
        if not self.show2ndpage:
            self.nums[1].pack_forget()
            self.pages[self.curpage+1].forget()

    def get(self):
        return self.pages[self.selected]
    def shift(self, dn):
        N = len(self.pages)-1
        num = max(min(self.curpage+dn,N),0)
        self.show(num)
    
root.bind("<Key-s>", lambda e: pages.get().straighten(e))
root.bind("<Command-z>", lambda e: pages.get().undo(e))
root.bind("<Command-Z>", lambda e: pages.get().redo(e))

#================================================================================
main = tk.Frame(root, background="cyan") #contains the canvas
pages = Pages(main)
main.configure(width = pages.cX*2, height = pages.cY)
palette = Palette(root,root,pages)
palette.widget.pack(side=tk.TOP, fill=tk.X)
main.pack(side=tk.BOTTOM, fill=tk.X)

#================================================================================
root.bind("<C>", pages.get().clear)
root.mainloop()
